import json
import string
import time
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile

from bot import bot
from db.fdb_work import goods_list
from db.sqlite_work import write_user_enter, take_caption_sqlite, read_product, get_date_from_db, show_distributor_offer
from core_func import date_out, title_formatting
from keyboards.user import user_first_kb, \
    catalog_full_kb, \
    redmi_inline_kb, \
    catalog_brand_phones_kb, \
    realme_inline_kb, \
    samsung_inline_kb, \
    tecno_inline_kb, \
    tcl_inline_kb, \
    media_pad_kb, \
    key_old_phones_kb, \
    watches_kb, \
    catalog_order_kb, powerbanks_kb, services_kb, smartphone_repair_kb, battery_kb, display_kb, honor_inline_kb

from config import hidden_vars
from testfunc import newest_price

user_ = Router()


async def smart_goods(m: Message):
    txt = list()
    result = goods_list(80, 84)
    for row in result:
        txt.append(f'{row[1]}\n–¶–µ–Ω–∞: {int(row[3])} —Ä—É–±\n\n')
    line = ''.join(txt)
    txt.clear()
    await m.answer(text=line)


async def show_product(callback: CallbackQuery):
    code_product = callback.data
    chat_id = callback.from_user.id
    caption = take_caption_sqlite(code_product)
    pic = read_product(name='PHOTO', code='CODE', product_code=code_product)
    if pic is None or pic[0] is None:
        pic = FSInputFile(path=hidden_vars.misc_path.photo_path + str(code_product) + '.jpg',
                          chunk_size=100)
        await bot.send_photo(chat_id=chat_id, photo=pic, caption=caption)

    else:
        await bot.send_photo(chat_id=chat_id,
                             photo=read_product(name='PHOTO', code='CODE', product_code=code_product)[0],
                             caption=caption)


async def start(m: Message):
    write_user_enter(
        date_out(m.date),
        m.from_user.id,
        m.from_user.first_name,
        m.from_user.last_name,
        m.from_user.username,
        m.message_id,
        m.text
    )
    await m.answer_photo(photo='AgACAgIAAxkBAAIFuWQVrxkxJMuUdAUGfGAuXSt448I1AAKgxjEbYxGxSFOciZYzLCoJAQADAgADeQADLwQ',
                         caption=f'–ü—Ä–∏–≤–µ—Ç, {m.from_user.full_name}, —ç—Ç–æ—Ç –ë–û–¢ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ —Ü–µ–Ω—ã '
                                 f'–≤ —Å–∞–ª–æ–Ω–µ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏ –¶–ò–§–†–û–¢–ï–•\n\n'
                                 f'–ê —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø–æ–¥ –∑–∞–∫–∞–∑',
                         reply_markup=user_first_kb)


async def begin(m: Message):
    await m.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=user_first_kb)


async def catalog_all(m: Message):
    await m.answer(text='–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=catalog_full_kb)


async def catalog_phones(m: Message):
    await m.answer(text='–í—ã–±–µ—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –µ—Å—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π',
                   reply_markup=catalog_brand_phones_kb)


async def redmi_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=redmi_inline_kb.as_markup())


async def realme_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=realme_inline_kb.as_markup())


async def honor_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=honor_inline_kb.as_markup())


async def samsung_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=samsung_inline_kb.as_markup())


async def tecno_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=tecno_inline_kb.as_markup())


async def tcl_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=tcl_inline_kb.as_markup())


async def catalog_media_pad(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=media_pad_kb.as_markup())


async def catalog_old_key_phones(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=key_old_phones_kb.as_markup())


async def smart_watches(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=watches_kb.as_markup())


async def powerbanks(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=powerbanks_kb.as_markup())


async def items_order(m: Message):
    await m.answer(text='–¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è\n–æ—Ç 1-–≥–æ –¥–æ 7-–º–∏ –¥–Ω–µ–π', reply_markup=catalog_order_kb)


async def services(m: Message):
    await m.answer('–£—Å–ª—É–≥–∏', reply_markup=services_kb)


async def smartphone_repair(m: Message):
    await m.answer('–ú–æ–∂–µ–º –±—ã—Å—Ç—Ä–æ –∏ –Ω–µ–¥–æ—Ä–æ–≥–æ –æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ —Ä–µ–º–æ–Ω—Ç—É', reply_markup=smartphone_repair_kb)


async def battery(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=battery_kb.as_markup())
    await m.answer('–ó–∞–º–µ–Ω–∏–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–∞ –≤–∞—à–µ–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ.\n'
                   '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–µ—Ö, —á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤—ã—à–µ\n'
                   '–î–ª—è –∑–∞–∫–∞–∑–∞ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –ø–∏—à–∏—Ç–µ:\n@tser88 –∏–ª–∏ @cifrotech_mobile')


async def display(m: Message):
    await m.answer(text='‚Üì ‚Üì ‚Üì –í –ù–∞–ª–∏—á–∏–∏', reply_markup=display_kb.as_markup())
    await m.answer('–ó–∞–º–µ–Ω–∏–º —Ä–∞–∑–±–∏—Ç—ã–π –¥–∏—Å–ª–ø–µ–π!\n'
                   '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–µ—Ö, —á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤—ã—à–µ\n'
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –¥–∏—Å–ø–ª–µ–π –≤–º–µ—Å—Ç–µ —Å —É—Å–ª—É–≥–æ–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ\n'
                   '–î–ª—è –∑–∞–∫–∞–∑–∞ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –ø–∏—à–∏—Ç–µ:\n@tser88 –∏–ª–∏ @cifrotech_mobile')


async def xerox(m: Message):
    await m.answer_photo(photo='AgACAgIAAxkBAAIUBGQ7_ZXQPPvs1o8pNmt9ncZIKTd2AAKlxzEb73ThScaSExX72hsBAQADAgADeQADLwQ',
                         caption='–ü–ù-–°–ë: –° 8-00 –¥–æ 17-00\n'
                                 '   –í–°: –° 9-00 –¥–æ 17-00\n\n'
                                 '–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—åüôÇ')


async def chat_bot(m: Message):
    await m.answer('–õ—é–±—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, —Å–æ–∑–¥–∞–Ω–∏—é –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–∞—Ç-–±–æ—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n'
                   '@tser88\n\n')


async def display_order_list(m: Message):
    spreadsheet = str()
    if m.text == 'Xiaomi –ø–æ–¥ –∑–∞–∫–∞–∑' or m.text == 'Samsung –ø–æ–¥ –∑–∞–∫–∞–∑':
        if m.text == 'Xiaomi –ø–æ–¥ –∑–∞–∫–∞–∑':
            spreadsheet = 'optmobex_xiaomi'
        if m.text == 'Samsung –ø–æ–¥ –∑–∞–∫–∞–∑':
            spreadsheet = 'optmobex_samsung'
        update_text = f'–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã {get_date_from_db(spreadsheet)}\n–∏ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã 1-3 –¥–Ω—è'
        result = show_distributor_offer(spreadsheet)
        mess = update_text + '\n\n‚Üì ‚Üì ‚Üì ‚Üì \n' + \
               title_formatting(spreadsheet, ''.join(item[0] + ' ' + str(item[1]) + '\n' for item in result))
        if len(mess) > 4096:
            for i in range(0, len(mess), 4096):
                part_mess = mess[i: i + 4096]
                await m.answer(part_mess)
                time.sleep(1)
        else:
            await m.answer(mess)
    if m.text == 'Apple –ø–æ–¥ –∑–∞–∫–∞–∑':
        apple_price = newest_price()
        date_ = apple_price[0][0].split('T')[0]
        time_ = apple_price[0][0].split('T')[1]
        date_text = f'–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã {date_} –≤ {time_}\n–∏ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã 1-3 –¥–Ω—è\n\n‚Üì ‚Üì ‚Üì ‚Üì \n'


    await m.answer('–í–ù–ò–ú–ê–ù–ò–ï, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
                   '–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å\n@tser88 –∏–ª–∏ @cifrotech_mobile')


async def hello(m: Message):
    await m.answer('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! –í–Ω–∏–∑—É –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é')


async def echo(m: Message):
    if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in m.text.split(' ')} \
            .intersection(set(json.load(open('very_bad_word.json')))):
        await m.reply('–ù–µ–∫—Ä–∞—Å–∏–≤–æ –≤—ã—Ä–∞–∂–∞–µ—à—å—Å—è')
        await m.delete()
    else:
        await m.answer('–í—Å—ë —è—Å–Ω–æ! –ü–æ–ª—å–∑—É–π—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π')


def register_user_handlers():
    user_.message.register(start, CommandStart())
    user_.callback_query.register(show_product)
    user_.message.register(begin, F.text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ')
    user_.message.register(catalog_all, F.text == '–í –Ω–∞–ª–∏—á–∏–∏')
    user_.message.register(catalog_phones, F.text == '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã')
    user_.message.register(redmi_phones, F.text == 'Xiaomi / Redmi / Poco')
    user_.message.register(realme_phones, F.text == "Realme / Oppo / OnePlus")
    user_.message.register(honor_phones, F.text == "Huawei / Honor")
    user_.message.register(samsung_phones, F.text == "Samsung")
    user_.message.register(tecno_phones, F.text == "Tecno / Infinix")
    user_.message.register(tcl_phones, F.text == "TCL")
    user_.message.register(catalog_media_pad, F.text == "–ü–ª–∞–Ω—à–µ—Ç—ã")
    user_.message.register(catalog_old_key_phones, F.text == "–ö–Ω–æ–ø–æ—á–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã")
    user_.message.register(smart_watches, F.text == "–£–º–Ω—ã–µ —á–∞—Å—ã")
    user_.message.register(powerbanks, F.text == "Power Banks")
    user_.message.register(smart_goods, F.text == "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤")
    user_.message.register(items_order, F.text == "–ü–æ–¥ –∑–∞–∫–∞–∑")
    user_.message.register(hello, F.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
    user_.message.register(display_order_list, F.text.contains(' –ø–æ–¥ –∑–∞–∫–∞–∑'))
    user_.message.register(services, F.text == '–£—Å–ª—É–≥–∏')
    user_.message.register(smartphone_repair, F.text == '–†–µ–º–æ–Ω—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤')
    user_.message.register(battery, F.text == '–ó–∞–º–µ–Ω–∞ –±–∞—Ç–∞—Ä–µ–∏')
    user_.message.register(display, F.text == '–ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è')
    user_.message.register(xerox, F.text == '–ö—Å–µ—Ä–æ–∫–æ–ø–∏—è, –ø–µ—á–∞—Ç—å, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    user_.message.register(chat_bot, F.text == '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–æ–≤')
    user_.message.register(echo, F.text)
